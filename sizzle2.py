import pandas as pd
import re
from janome.tokenizer import Tokenizer
from collections import Counter

# CSVファイルの読み込み
df = pd.read_csv('ozmall_reviews.csv', encoding='utf-8')

# 総合評価が4.5以上の高評価口コミを抽出（コピーを作成）
df_high = df[df['overall_score'] >= 4.5].copy()
print("高評価データ件数:", len(df_high))

# 前処理関数：不要な空白や記号を除去
def preprocess_text(text):
    if pd.isna(text):
        return ""
    # 複数の空白を1つに統一
    text = re.sub(r'\s+', ' ', text)
    # 日本語以外の不要な記号などを除去（必要に応じて調整）
    text = re.sub(r'[^\w\sぁ-んァ-ン一-龥]', '', text)
    return text

# Janomeトークナイザーの初期化
tokenizer = Tokenizer()

# 分かち書き関数：generatorをリストに変換
def tokenize_text(text):
    tokens = list(tokenizer.tokenize(text, wakati=True))
    return tokens

# 料理関連の口コミテキスト（例：comment_food_drink）の前処理と分かち書き
df_high['clean_comment_food_drink'] = df_high['comment_food_drink'].apply(preprocess_text)
df_high['tokens_food_drink'] = df_high['clean_comment_food_drink'].apply(tokenize_text)

# ------------------------------
# シズルワードリスト（候補） ※リスト中の各行を要素として登録
# ------------------------------
sizzle_words = {
    '飽きのこない', '辛口', '塩辛い', 'ビター', '味わい深い', '芳しい', '渋い', '美味', 'あっさり',
    '甘露', '渋味のある', 'ピリ辛', '後味すっきり', '凝縮した', 'しみうま', '風味豊かな', '後味のよい',
    'キレのある', 'しみ込んだ', '深みのある', '後を引く', 'クセになる', 'しょっぱい', '複雑な', '脂っこい',
    'クセのない', 'シンプルな', 'ふくよかな', '脂の乗った', '口に広がる', 'スイート', 'フルーティ',
    '甘い', 'クリーミー', 'すっきり', '芳醇な', '甘辛い', '激辛', 'すっぱい', 'ほの甘い', '甘口',
    '濃い味', 'すっぱ辛い', 'ほのかな', '甘さ控えめ', '香ばしい', 'スパイシー', 'ほろ苦い', '甘じょっぱい',
    '香味', 'スモーキー', 'ほんのりした', '甘ずっぱい', '極甘', '繊細な', 'マイルド', '甘味のある',
    'コクうま', 'ソルティ', 'まったり', '薄味', '極旨', 'ダシの効いた', 'まろやかな', 'うす塩', '極辛',
    '淡白', 'みずみずしい', 'うっすら', 'コクのある', '超すっぱい', 'やさしい', '旨辛', 'コク深い',
    'デリシャス', 'やみつきになる', 'うま味のある', 'こっくり', '特濃', '余韻のある', '塩味のある',
    'こってり', '苦みのある', 'よくしみた', '香りのよい', 'さっぱり', '濃厚な', 'リッチな', '香る',
    'サワー', '濃密な', '薫る', 'さわやかな', '鼻に抜けるような', '辛い', '酸味のある', '華やかな',
    'あたたか', 'サクッと', 'つるつる', 'ぷにっと', 'あつあつ', 'ザクッと', 'つるり', 'ぷにぷに',
    '硬い', 'サクフワ', 'つるん', 'プリッと', 'ガツガツ', 'さっくり', 'とろーり', 'プリプリ',
    '噛み心地のよい', 'さっくり', 'とろける', 'ぷるっと', '噛みごたえのある', 'サラサラ', 'とろっと',
    'ふるふる', 'からっと', 'ザラザラ', 'ドロッと', 'ぷるぷる', 'カリカリ', 'さらっと', 'とろとろ',
    'ぷるるん', 'ガリガリ', 'ザラッと', 'ドロドロ', 'ぷるん', 'カリッと', 'さらり', 'とろり',
    'ふわっと', 'ガリッと', 'しこしこ', 'なめらかな', 'ふわとろ', '軽い', '舌触りのよい', 'ねっとり',
    'ふわふわ', 'キーン', 'しっかりした', 'ねばねば', 'ふわり', 'ギュギュッと', 'しっとり', '粘りのある',
    'ふんわり', 'ギュッと', 'シャキシャキ', 'のどごしのある', 'ほかほか', 'キンキン', 'しゃきっと',
    '歯切れのよい', 'ポキポキ', 'グイグイ', 'しゃりしゃり', 'パクパク', 'ほくほく', 'グイッと',
    'ジューシー', '歯ごたえのある', 'ほっくり', '口当たりのよい', 'ジュウジュウ', '歯ざわりのよい',
    'ほっこり', '口いっぱいに', 'じゅわー', 'はじける', 'ほろっと', '口どけのよい', 'シュワシュワ',
    'パラパラ', 'ほろほろ', 'クリスピー', 'ジュワジュワ', 'パリッと', 'ポロポロ', 'ゴクゴク',
    'シュワッと', 'パリパリ', 'ほろり', 'ゴクッと', 'じゅわっと', '冷え冷え', 'むきゅっと',
    'コシのある', '新食感', '冷やし', 'ムチムチ', 'ゴツゴツ', 'しんなり', 'ピリッと', 'ムッチリ',
    'ゴツッと', 'スースー', 'ヒリヒリ', 'もきゅっと', 'こりこり', 'スーツと', 'ピリピリ', 'もちっと',
    'コリッと', 'するする', 'ひんやり', 'もちもち', 'ゴロゴロ', '弾力のある', 'ふかふか',
    'もっちり', 'ゴロッと', 'チュルン', 'ぷちっと', 'やわらかい', 'サクサク', 'つぶつぶ', 'ぷちぷち',
    'ザクザク', 'つるっと', 'ふっくら', '揚げたて', '行列のできる', '上質な', '生の', '朝採り',
    '切りたて', '上品な', '濃縮', 'あぶり', '具だくさん', '進化系', 'ノンオイル', 'あらぎり',
    'グルテンフリー', '新鮮な', 'ノンシュガー', '安心', 'グルメ', 'スーパーフード', 'B級',
    '一流の', '削りたて', '贅沢な', '秘伝の', '田舎の', '減塩', '絶品', '100%', '癒しの',
    '厳選素材', '絶妙な', '評判の', '淹れたて', '高級感', '先進の', 'ぶっかけ', '彩りがよい',
    '香料不使用', '鮮度のよい', 'ブランド', '栄養たっぷり', '国産', '素材の', 'フレッシュな',
    'エコな', 'コスパ', '素朴な', 'プレミアム', '選りすぐり', 'こだわりの', '炊きたて', 'ヘルシーな',
    '黄金比', 'ごちそう', '匠', 'ほっとする', 'おうちごはん', 'ご当地', 'たっぷり',
    'ボリュームのある', 'オーガニック', 'コトコト', '食べ応えのある', '本格的', '大盛り',
    'こんがり', '食べごろ', '本場の', 'おしゃれな', '砂糖不使用', '摘みたて', '本来の', '大人の',
    '斬新な', 'つゆだく', '幻の', 'お取り寄せ', '産地限定', '低塩', 'まるごと', 'おふくろの',
    '産地直送', '低カロリー', '丸焼き', 'おもてなし', '幸せの', '低糖質', '三ツ星', 'オリジナリティ',
    '自家製の', '定番の', '見映えのよい', '俺の', '自然の', '出来立て', '昔ながらの', '隠し味',
    'じっくり', '手作り', '蒸したて', 'がっつり', '老舗', '伝統の', '無添加', '体にやさしい',
    '自分仕様', '天然の', '無農薬', 'カロリーオフ', '自分へのご要美', '糖質ゼロ', 'もぎたて',
    'カロリーゼロ', 'しぼりたて', '特選', '焼きたて', 'かわいい', '自慢の', '独特の', '有機の',
    '皮ごと', '地元の', 'とっておき', '忘れられない', '甘熟', 'シュガーレス', 'とれたて', '和風',
    '完熟の', '熟成した', 'ナチュラル', '話題の', '季節限定', '旬', '懐かしい'
}

# ------------------------------
# シズルワード抽出関数：トークンリスト内からシズルワード候補と一致するものを抽出
def extract_sizzle_words(tokens, sizzle_set):
    return [word for word in tokens if word in sizzle_set]

# 口コミテキストからシズルワードを抽出し、新たなカラムに格納
df_high['sizzle_words'] = df_high['tokens_food_drink'].apply(lambda tokens: extract_sizzle_words(tokens, sizzle_words))

# 全口コミにおけるシズルワード出現頻度の集計
all_sizzle_words = sum(df_high['sizzle_words'].tolist(), [])
sizzle_counter = Counter(all_sizzle_words)
print("全体のシズルワード頻出上位20語:")
for word, count in sizzle_counter.most_common(20):
    print(f"{word}: {count}")

# 利用目的（purpose）ごとのシズルワード使用頻度を集計
sizzle_by_purpose = df_high.groupby('purpose')['sizzle_words'].apply(lambda lists: sum(lists, []))
sizzle_by_purpose = sizzle_by_purpose.apply(lambda tokens: Counter(tokens))
print("\n利用目的別のシズルワード頻度:")
print(sizzle_by_purpose)

# ※必要に応じて、各シーンや店舗ごと、または時系列での傾向分析も追加可能です。
